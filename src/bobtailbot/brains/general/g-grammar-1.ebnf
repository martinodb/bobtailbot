(* EBNF grammar for instaparse *)

(* Careful with the angle brackets. On the left, the node type is omitted from the ptree. On the right, the pattern is omitted.
If you prefer not to omit the node type, instead of using the angle brackets on the left you can simply equate the node type to identity in the transforms map.
For instance, for the node type "FACT", instead of doing:
<FACT> = (.. | ...)  ;
here, do:
FACT = (..| ...)  ; 
here, and then in the maps g-transforms-mkst and g-transforms-ckst in brain.clj, do:
:FACT identity

*)

<SENTENCE> =   (ADD-VOCAB | PROD-LIST | NQUERY | FACT | DEF | UNSUPPORTED) <";">* ;

(*For now, ly-adverbs can only be entered as part of a multi-word verb. But I need them in the grammar so that they are seen as known words*)
UNSUPPORTED = Lyadv;


<PROD-LIST> = PROD (<';'>+ PROD)* ;
<PROD> = (RULE | QUERY | QUESTION) <';'>* ;
<QUESTION> = ( YNQUESTION | NEG-YNQUESTION | T-DOES-QUESTION | NEG-T-DOES-QUESTION |T-WHO-QUESTION | T-WHOM-QUESTION);




(* ADD-VOCAB is currently implemented using the reader to read maps directly, without instaparse, but I'm leaving this here as a stub, in case I decide to use a more complex syntax to introduce vocabulary *)
ADD-VOCAB = <"add"> <whitespace>+ VOC-TYPE <whitespace>+ VOC-MAP (<whitespace> | <";">)* ;
VOC-TYPE = ("verb" | "noun" | "adj" | "adv") ;
VOC-MAP = "{" <whitespace>*  (VMkey <whitespace>+ VMval (<whitespace> | <",">)*)+ <whitespace>*  "}" ;
<VMkey> = #"\:[A-Za-z0-9\-_]+" ;
<VMval> = #"[\"\']?[A-Za-z0-9\-_]+[\"\']?" ;


(*DEF*)
<DEF> = (DEF-FACT | DEF-QUERY);
DEF-FACT = <"define"> (<"asserted">|<"unasserted">)? <"fact"> NAME <":"> FACT-BODY ;
DEF-QUERY = <"define">  <"query"> NAME <":"> QUERY ;

(*NQUERY*)
NQUERY = <"query"> NAME ;


(* FACT *)
NEG = (<"it's"> | <"it is">) (<"false"> | (<"not"> (<"the case">)?)) <"that">  ;
PREAFF = (<"it's"> | <"it is">) (<"true"> | <"the case">) <"that">  ;


FACT = (ATFACT | MOLFACT);

ATFACT = (ANON-FACT | INLDEF-FACT | NFACT) ;
ATFACT2 = (ANON-FACT | INLDEF-FACT | NFACT) ;


ANON-FACT = FACT-BODY ;
INLDEF-FACT = <"inline define">  (<"asserted">|<"unasserted">)? <"fact"> NAME <":">? FACT-BODY ;
NFACT = <"fact"> NAME ;

<FACT-BODY> = (TRIP-FACT | NONTRIP-FACT);


MOLFACT = ( AND-FACT | OR-FACT | NOT-FACT | PREAFF-FACT)  ;

AND-FACT = ATFACT2 (<","> <ATFACT2>)* <"and"> ATFACT2  ;
OR-FACT = ATFACT2 (<","> <ATFACT2>)* <"or"> ATFACT2  ;

NOT-FACT = <NEG> ATFACT2;
PREAFF-FACT = <PREAFF> ATFACT2;







<TRIP-FACT> = (AFF-TRIP-FACT | NEG-TRIP-FACT) ;
NONTRIP-FACT = "just testing nontrip fact" ;

<AFF-TRIP-FACT> = (TRIP-FACT-IND2 | TRIP-FACT-IC | TRIP-FACT-CLASS2) ;
<NEG-TRIP-FACT> = (PRENEG-TRIP-FACT | EMBNEG-TRIP-FACT) ;


TRIP-FACT-IND2 = T-SUBJECT T-VP ;
<T-VP> = T-VERB T-OBJECT;


<TRIP-FACT-IC> = TRIP-FACT-ISA ;
TRIP-FACT-ISA = T-SUBJECT <T-ISA> T-OBJECT-CLASS ;

<TRIP-FACT-CLASS2> = TRIP-FACT-EVERYISA;
TRIP-FACT-EVERYISA = <"every"> T-SUBJECT-CLASS <T-ISA> T-OBJECT-CLASS ;

<PRENEG-TRIP-FACT> = (PRENEG-TRIP-FACT-IND2 | PRENEG-TRIP-FACT-IC | PRENEG-TRIP-FACT-CLASS2) ;

<EMBNEG-TRIP-FACT> = (EMBNEG-TRIP-FACT-IND2 | EMBNEG-TRIP-FACT-IC); (* CLASS2 would be confusing*)


PRENEG-TRIP-FACT-IND2 = <NEG> T-SUBJECT T-VP ;

<PRENEG-TRIP-FACT-IC> = PRENEG-TRIP-FACT-ISA ;
PRENEG-TRIP-FACT-ISA = <NEG> T-SUBJECT <T-ISA> T-OBJECT-CLASS ;

<PRENEG-TRIP-FACT-CLASS2> = PRENEG-TRIP-FACT-EVERYISA;
PRENEG-TRIP-FACT-EVERYISA = <NEG> <"every"> T-SUBJECT-CLASS <T-ISA> T-OBJECT-CLASS ;


EMBNEG-TRIP-FACT-IND2 = T-SUBJECT EMBNEG-T-VP ;
<EMBNEG-T-VP> = EMBNEG-T-VERB T-OBJECT;

<EMBNEG-TRIP-FACT-IC> = EMBNEG-TRIP-FACT-ISA ;
EMBNEG-TRIP-FACT-ISA = T-SUBJECT <EMBNEG-T-VCOP-IC> T-OBJECT-CLASS ;
EMBNEG-T-VCOP-IC = (<"am not">|<"isn't">|<"is not">|<"aren't">|<"are not">)(<"a">|<"an">|<"a kind of">)? ;


<EMBNEG-T-VERB> = (EMBNEG-T-Vconj | EMBNEG-T-Vvar);
<EMBNEG-T-Vconj> = NegVtraPres3 ;
<EMBNEG-T-Vvar> = DOESNT <"do">  VAR <"to">;

<T-Vconj> = VtraPres3 ;
<T-Vvar> = (VAR | DO-Vt-pr3 VAR <"to">) ;

<T-SUBJECT> = (T-NP | VAR);
<T-VERB> = (T-Vconj | T-Vvar);
<T-OBJECT> = (T-NP | VAR);



T-ISA = (<"am">|<"is">|<"are">)(<"a">|<"an">|<"a kind of">)? ;
T-SUBJECT-CLASS = T-N ;
T-OBJECT-CLASS = T-N;

<T-Vconj> = VtraPres3 ;
<T-Vvar> = (VAR | DO-Vt-pr3 VAR <"to">) ;


<T-NP> = (INDNAME | T-DET-P) ;
T-DET-P = <"the"> T-N ;
<INDNAME> = (NNP | GER-OR-TOINF | VALUE) ;

<VAR> = (EXVAR | UNVAR) ;
EXVAR = #"\![A-Za-z][A-Za-z0-9_-]*";
UNVAR = #"\?[A-Za-z][A-Za-z0-9_-]*";





(*RULE*)
<RULE> = (NAMED-RULE | ANON-RULE);
NAMED-RULE = (NAMED-RULE-wtest | NAMED-RULE-notest);
NAMED-RULE-wtest = <"rule"> NAME <":">? RULE-BODY-wtest ;
NAMED-RULE-notest = <"rule"> NAME <":">? RULE-BODY-notest ;
ANON-RULE = (ANON-RULE-wtest | ANON-RULE-notest);
ANON-RULE-wtest = RULE-BODY-wtest;
ANON-RULE-notest = RULE-BODY-notest;

<RULE-BODY-wtest> = FACT <"when"> LHS-wtest  ;
<RULE-BODY-notest> = FACT <"when"> LHS-notest  ;


<LHS-wtest> = <"test"> TEST <','>* <"facts"> FACT  ;
<LHS-notest> = FACT ;


(*QUERY*)
Q-PREAFF = <"is it"> (<"true"> | <"the case">) <"that">  ;
Q-NEG = <"is it"> (<"false"> | (<"not"> (<"the case">)?)) <"that">  ;

QUERY = (QUERY-wtest | QUERY-notest);

QUERY-notest = Q-BODY-notest;
<Q-BODY-notest> = <"match"> QLHS-notest <';'>* ;


QUERY-wtest = Q-BODY-wtest;
<Q-BODY-wtest> = <"match"> QLHS-wtest <';'>* ;

TEST = (TSEXPR)+ ;
TSEXPR = TS-OPERATOR (TS-ARG)+ ;
<TS-OPERATOR> = ("equals"| "=" | "greater than"| ">" | "lower than" | "<") ;
<TS-ARG> = (T-NP | VAR | FUN-TSEXPR) ;
FUN-TSEXPR = TFUN-HEAD (TFUN-ARG)* ;
<TFUN-HEAD> = STRING ; (* CAREFUL!! *)
<TFUN-ARG> = TS-ARG ;

<QLHS-notest> = FACT ;
<QLHS-wtest> = <"test"> TEST <','>* <"facts"> FACT  ;


(*YNQUESTION*)
YNQUESTION = (YNQUESTION-wtest | YNQUESTION-notest);
YNQUESTION-wtest =  <Q-PREAFF>? QLHS-wtest <"?">+ <';'>* ;
YNQUESTION-notest =  <Q-PREAFF>? QLHS-notest <"?">+ <';'>* ;


(*NEG-YNQUESTION*)
NEG-YNQUESTION = (NEG-YNQUESTION-wtest | NEG-YNQUESTION-notest);
NEG-YNQUESTION-wtest = <Q-NEG> QLHS-wtest <"?">+ <';'>*;
NEG-YNQUESTION-notest = <Q-NEG> QLHS-notest <"?">+ <';'>* ;

(*T-DOES-QUESTION*)
T-DOES-QUESTION = D-TRIP-FACT-IND2  ;
D-TRIP-FACT-IND2 = T-DOES-SV T-OBJECT <"?">+;
<T-DOES-SV> = DOES T-SUBJECT VtraInf;




(*NEG-T-DOES-QUESTION*)
NEG-T-DOES-QUESTION = NEG-D-TRIP-FACT-IND2   ;
NEG-D-TRIP-FACT-IND2 = T-DOESNT-SV T-OBJECT <"?">+;
<T-DOESNT-SV> = DOESNT T-SUBJECT VtraInf;




(*T-WHO-QUESTION*)
T-WHO-QUESTION =  WHO-TRIP-FACT-IND2  ;
WHO-TRIP-FACT-IND2 = <"who"> T-VP <"?">+;

(*EMBNEG-T-WHO-QUESTION*) (*NOT YET IMPLEMENTED*)
EMBNEG-T-WHO-QUESTION =  WHO-EMBNEG-TRIP-FACT-IND2  ;
WHO-EMBNEG-TRIP-FACT-IND2 = <"who"> EMBNEG-T-VP <"?">+;


(*T-WHOM-QUESTION*)
T-WHOM-QUESTION =  WHOM-TRIP-FACT-IND2 ;
WHOM-TRIP-FACT-IND2 = (<"who"> | <"whom">) T-DOES-SV <"?">+;






(*OTHER STUFF*)


<NAME> = STRING ;

NUMBER = #"[0-9]+" ;

(* <STRING> = #"[A-Za-z][A-Za-z0-9_-]+" ; *)
<STRING> = #"[A-Za-z][A-Za-z0-9\/\._-]+" ;

<STRING-notNNP> = #"[a-z][A-Za-z0-9\/\._-]+" ;

<FIELD> = STRING-notNNP ;


NNP =  NNPtoken (<whitespace> NNPtoken)* ;
<NNPtoken> = #"[A-Z][A-Za-z0-9\-_]+" ;
whitespace = #"\s+" ;

<VALUE> = STRING-quoted | NUMBER ;

STRING-quoted = #"\"[A-Za-z][A-Za-z0-9\/\._-]+\"" ;

<GER-OR-TOINF> = (GERUND | TOINF) ;
<TOINF> = (TOINFcop | TOINFnc) ;

TOINFcop = <"to"> "be" ;

TOINFnc = <"to"> V-INF-OR-PNon3 ;

<V-INF-OR-PNon3> = (VtraInfOrPresNon3 | VintInfOrPresNon3) ;


<VintInfOrPresNon3> = ("walk" | "talk" |"breath");

VtraInf = VtraInfOrPresNon3 ;
VintInf = VintInfOrPresNon3 ;

<GERUND> = (GERUNDtra | GERUNDint | GERUNDcop);


GERUNDint = ("walking"|"talking"|"breathing") ;
GERUNDcop = ("being") ;

<T-N> = T-Nsg (* for now, especially for triples, only nouns in singular forms*)
<T-Nsg> = Nlex-sg ;


<Nlex-sg> = ((Adj)* Nsimp-sg)+ ;




NONTRIP-CONDITION = "just testing nontrip condition" ;



(*Do more tenses*)
<VintConj>  =  (VintPres) ;
<VtraConj> = (VtraPres) ;

<VintPres> = (VintPres3 | VintPresNon3) ;
<VtraPres> = (VtraPres3 | VtraPresNon3) ;



(* in English the conjugated verb in present is like the infinitive, *)
(* except for the 3rd person singular. *)

<VintPresNon3> = VintInfOrPresNon3 ;
<VtraPresNon3> = VtraInfOrPresNon3 ;

VintPres3 = ("walks" | "talks" |"breathes");





(*Do more tenses*)
NegVintConj = (NegVintPres) ;
NegVtraConj = (NegVtraPres) ;


<NegVintPres> = (NegVintPres3 | NegVintPresNon3 ) ;
<NegVtraPres> = (NegVtraPres3 | NegVtraPresNon3);




<NegVintPres3> = DOESNT VintInf ;
<NegVtraPres3> = DOESNT VtraInf ;


<NegVintPresNon3> = DONT VintInf ;
<NegVtraPresNon3> = DONT VtraInf ;


<DO-Vt-pr3> = <"does">;


<DOES> = DO-aux-pr3;
<DO-aux-pr3> = <"does">;


<DOESNT> = DO-aux-neg-pr3;
<DO-aux-neg-pr3> = (<"doesn't"> | <"does not">);

<DONT> = DO-aux-neg-prNon3 ;
<DO-aux-neg-prNon3> = (<"doesn't"> | <"does not">);




